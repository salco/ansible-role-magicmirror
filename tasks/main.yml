---
- name: "prepare deployment"
  import_tasks: setup-deployment.yml

- name: Run npm install for 3rd party modules
  command: 'npm install --only=prod'
  args:
    chdir: "{{ item.invocation.module_args.dest }}"
  loop: "{{ third_party_modules.results }}"
  loop_control:
    label: "{{ item.item.name }}"
  when: item.changed and item.item.npm_install

- name: Run extra commands for 3rd party modules
  command: "{{ item.item.extra_cmd }}"
  args:
    chdir: "{{ item.invocation.module_args.dest }}"
  loop: "{{ third_party_modules.results }}"
  loop_control:
    label: "{{ item.item.name }}"
  when: item.changed and item.item.extra_cmd is defined and item.item.extra_cmd != ""

- name: Install MagicMirror config files
  template: src="{{ item.src }}" dest="{{ magicmirror_src_dir }}/MagicMirror/{{ item.dest }}"
  loop:
    - { src: config.js.j2, dest: config/config.js }
    - { src: compliments.json.j2, dest: modules/default/compliments/compliments.json }
  notify: restart mm

- name: "Configure plymouth boot animation"
  import_tasks: configure-plymouth.yml

//------- pm2 stuff
  - name: Install pm2 node.js package globally
    npm:
      name: pm2
      global: yes
      state: present
    register: pm2_install

  - name: Configure pm2 startup
    command: /usr/lib/node_modules/pm2/bin/pm2 startup systemd -u {{ magicmirror_pm2_user }} --hp /home/{{ magicmirror_pm2_user }}
    args:
      warn: false
    when: pm2_install.changed
//-------

- name: "Quality of life for magicmirror on the host linux"
  import_tasks: configure-linux-host.yml

- name: "Configure audio on the host linux"
  import_tasks: configure-audio.yml

//------- pm2 stuff
- name: Install pm2 control files
  template:
    src: "{{ item.src }}"
    dest: "{{ magicmirror_src_dir }}/MagicMirror_pm2/{{ item.dest }}"
  loop:
    - { src: pm2_MagicMirror.json.j2, dest: pm2_MagicMirror.json }
    - { src: mm.sh.j2, dest: mm.sh }
  register: pm2_control

- name: Set pm2 auto startup of MagicMirror
  command: "{{ item }}"
  args:
    warn: false
  register: command_result
  failed_when: "'[ERROR]' in command_result.stderr"
  loop:
    - pm2 startOrRestart {{ magicmirror_src_dir }}/MagicMirror_pm2/pm2_MagicMirror.json
    - pm2 save
  when: pm2_control.changed
//-------
